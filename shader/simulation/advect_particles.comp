#version 450

#include "../global_bindings.glsl"
#include "../utilities.glsl"
#include "hybrid_fluid.glsl"
#include "particles.glsl"

layout(set = 2, binding = 0) uniform texture3D VelocityVolumeX;
layout(set = 2, binding = 1) uniform texture3D VelocityVolumeY;
layout(set = 2, binding = 2) uniform texture3D VelocityVolumeZ;
layout(set = 2, binding = 3, r8_snorm) uniform restrict image3D MarkerVolume;
layout(set = 2, binding = 4, r32ui) uniform restrict coherent uimage3D LinkedListDualGrid;
layout(set = 2, binding = 5) buffer restrict ParticlePositionLlBuffer { ParticlePositionLl Particles[]; };
layout(set = 2, binding = 6) buffer restrict ParticleBufferVx { vec4 ParticleBufferVelocityX[]; };
layout(set = 2, binding = 7) buffer restrict ParticleBufferVy { vec4 ParticleBufferVelocityY[]; };
layout(set = 2, binding = 8) buffer restrict ParticleBufferVz { vec4 ParticleBufferVelocityZ[]; };
layout(set = 2, binding = 9, r32ui) uniform restrict coherent uimage3D SolidPenetrationDepth;
layout(set = 2, binding = 10) uniform texture3D SignedDistanceField;

COMPUTE_PASS_PARTICLES

vec3 InterpolateTrilinear(vec3 v_000, vec3 v_100, vec3 v_010, vec3 v_110, vec3 v_001, vec3 v_101, vec3 v_011, vec3 v_111, vec3 interpolantsX,
                          vec3 interpolantsY, vec3 interpolantsZ) {
    return mix(mix(mix(v_000, v_100, interpolantsX), mix(v_010, v_110, interpolantsX), interpolantsY),
               mix(mix(v_001, v_101, interpolantsX), mix(v_011, v_111, interpolantsX), interpolantsY), interpolantsZ);
}

float sampleVelocity(ivec3 coord, uint component) {
    if (component == 0)
        return texelFetch(VelocityVolumeX, coord, 0).x;
    else if (component == 1)
        return texelFetch(VelocityVolumeY, coord, 0).x;
    else
        return texelFetch(VelocityVolumeZ, coord, 0).x;
}

void main() {
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= NumParticles)
        return;

    vec3 gridSize = textureSize(VelocityVolumeX, 0);
    vec3 gridTexelSizeNormalized = 1.0 / gridSize;

    // Sample all 8 neighboring velocity grid cells
    //
    // Notes from experimentation with texture sampling:
    // * texelFetch is either slower or as fast. Previously allowed particles outside the volume in which case it was better since we got boundaries
    // for free wiht SamplerPointClamp
    // * using linear sampler repeatedly (6x linear sample instead of 8x direct sample + manual interpolate) is indeed slower
    // (as one would hope for sanity's sake :))
    vec3 originalPosition = Particles[particleIndex].Position;
    vec3 offsetPositions[] = {
        max(vec3(0.0), originalPosition - vec3(1.0, 0.5, 0.5)),
        max(vec3(0.0), originalPosition - vec3(0.5, 1.0, 0.5)),
        max(vec3(0.0), originalPosition - vec3(0.5, 0.5, 1.0)),
    };

    vec3 v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111;
    [[unroll]] for (int i = 0; i < 3; ++i) {
        ivec3 volumeCoordMin = ivec3(offsetPositions[i]);
        ivec3 volumeCoordMax = min(volumeCoordMin + ivec3(1, 1, 1), ivec3(gridSize - ivec3(1)));

        v_000[i] = sampleVelocity(volumeCoordMin, i);
        v_100[i] = sampleVelocity(ivec3(volumeCoordMax.x, volumeCoordMin.yz), i);
        v_010[i] = sampleVelocity(ivec3(volumeCoordMin.x, volumeCoordMax.y, volumeCoordMin.z), i);
        v_110[i] = sampleVelocity(ivec3(volumeCoordMax.xy, volumeCoordMin.z), i);
        v_001[i] = sampleVelocity(ivec3(volumeCoordMin.xy, volumeCoordMax.z), i);
        v_101[i] = sampleVelocity(ivec3(volumeCoordMax.x, volumeCoordMin.y, volumeCoordMax.z), i);
        v_011[i] = sampleVelocity(ivec3(volumeCoordMin.x, volumeCoordMax.yz), i);
        v_111[i] = sampleVelocity(volumeCoordMax, i);
    }

    // Update velocity and the APIC affine matrix.
    // Trilinear interpolation for velocity.
    vec3 interpolantsX = fract(vec3(offsetPositions[0].x, offsetPositions[1].x, offsetPositions[2].x));
    vec3 interpolantsY = fract(vec3(offsetPositions[0].y, offsetPositions[1].y, offsetPositions[2].y));
    vec3 interpolantsZ = fract(vec3(offsetPositions[0].z, offsetPositions[1].z, offsetPositions[2].z));
    vec3 v_x00 = mix(v_000, v_100, interpolantsX);
    vec3 v_x01 = mix(v_001, v_101, interpolantsX);
    vec3 v_x10 = mix(v_010, v_110, interpolantsX);
    vec3 v_x11 = mix(v_011, v_111, interpolantsX);
    vec3 v_xy0 = mix(v_x00, v_x10, interpolantsY);
    vec3 v_xy1 = mix(v_x01, v_x11, interpolantsY);
    vec3 newVelocity = mix(v_xy0, v_xy1, interpolantsZ);

    // The Apic Matrix is the jacobi matrix of the velocity for fluids.
    vec3 cx = mix(mix(v_100, v_110, interpolantsY), mix(v_101, v_111, interpolantsY), interpolantsZ) -
              mix(mix(v_000, v_010, interpolantsY), mix(v_001, v_011, interpolantsY), interpolantsZ);
    vec3 cy = mix(v_x10, v_x11, interpolantsZ) - mix(v_x00, v_x01, interpolantsZ);
    vec3 cz = v_xy1 - v_xy0;

    // Advect with Runge Kutta 4
    // confined to current cell for which we know velocities are defined and we already sampled all corners - which makes this relatively cheap.
    vec3 k1 = newVelocity;
    vec3 stepK2 = Time.SimulationDelta * 0.5 * k1;
    vec3 k2 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK2),
                                   saturate(interpolantsY + stepK2), saturate(interpolantsZ + stepK2));
    vec3 stepK3 = Time.SimulationDelta * 0.5 * k2;
    vec3 k3 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK3),
                                   saturate(interpolantsY + stepK3), saturate(interpolantsZ + stepK3));
    vec3 stepK4 = Time.SimulationDelta * k3;
    vec3 k4 = InterpolateTrilinear(v_000, v_100, v_010, v_110, v_001, v_101, v_011, v_111, saturate(interpolantsX + stepK4),
                                   saturate(interpolantsY + stepK4), saturate(interpolantsZ + stepK4));
    vec3 totalMovement = Time.SimulationDelta * (1.0 / 6.0) * (k1 + 2.0 * (k2 + k3) + k4);
    vec3 newPosition = originalPosition + totalMovement;

    // if a particle managed to get outside of the volume, write to the next cell inside, so we can still give it treatment (with push boundaries!).
    ivec3 newGridCoord = clamp(ivec3(newPosition), ivec3(0.0), ivec3(gridSize) - ivec3(1.0));

    // Write new LinkedList & marker grid for density projection step.
    {
        // TODO: Consider not changing, density_projection_gather_error step can do this easily by checking the linkedlist volume
        imageStore(MarkerVolume, newGridCoord, vec4(CELL_FLUID, 0, 0, 0));
        ivec3 nearestDualGridCell = ivec3(newPosition - vec3(0.5));
        Particles[particleIndex].LinkedListNext = imageAtomicExchange(LinkedListDualGrid, nearestDualGridCell, particleIndex + 1) - 1;
    }

    // If we penetrated a solid, write max penetration into the penetration depth volume.
    // Note that penetration is clamped out  from -1 to 1 for distance to the cell
    //
    // Domain bounds are treated separately - it would mess our distance field computation up quite a bit since it would mean that there's a "special"
    // interior with positive sign. (can be done but I figured it's too messy)
    {
        vec3 penetration = max(vec3(0.0), vec3(1.0) - newPosition) - max(vec3(0.0), newPosition - vec3(gridSize - 1.0));
        vec3 texcoord = newPosition * gridTexelSizeNormalized; // / (gridSize - vec3(1));
        float solidDistance = texture(sampler3D(SignedDistanceField, SamplerTrilinearClamp), texcoord).x;
        if (solidDistance < 0.0) {
            vec3 solidDistanceGradient = normalize(vec3(
                texture(sampler3D(SignedDistanceField, SamplerTrilinearClamp), texcoord + vec3(gridTexelSizeNormalized.x, 0, 0)).x - solidDistance,
                texture(sampler3D(SignedDistanceField, SamplerTrilinearClamp), texcoord + vec3(0, gridTexelSizeNormalized.y, 0)).x - solidDistance,
                texture(sampler3D(SignedDistanceField, SamplerTrilinearClamp), texcoord + vec3(0, 0, gridTexelSizeNormalized.z)).x - solidDistance));
            penetration = -solidDistance * solidDistanceGradient;
        }

        // Write out max penetration.
        if (any(notEqual(penetration, vec3(0.0)))) {
            uint packedPenetrationVector = packPushDisplacement(penetration); // This is where clamp -1 to 1 happens
            float penetrationLengthCompVal = displacementLengthComparisionValue(packedPenetrationVector);
            uint previousPackedPenetrationVector = imageLoad(SolidPenetrationDepth, newGridCoord).x;
            while (displacementLengthComparisionValue(previousPackedPenetrationVector) < penetrationLengthCompVal) {
                uint expectedPackedPenetrationVector = previousPackedPenetrationVector;
                previousPackedPenetrationVector =
                    imageAtomicCompSwap(SolidPenetrationDepth, newGridCoord, previousPackedPenetrationVector, packedPenetrationVector);
                if (expectedPackedPenetrationVector == previousPackedPenetrationVector) {
                    break;
                }
            }
        }
    }

    // Write out particle.
    {
        Particles[particleIndex].Position = newPosition;
        ParticleBufferVelocityX[particleIndex] = vec4(cx, newVelocity.x);
        ParticleBufferVelocityY[particleIndex] = vec4(cy, newVelocity.y);
        ParticleBufferVelocityZ[particleIndex] = vec4(cz, newVelocity.z);
        // PIC only
        // ParticleBufferVelocityX[particleIndex] = vec4(vec3(0), newVelocity.x);
        // ParticleBufferVelocityY[particleIndex] = vec4(vec3(0), newVelocity.y);
        // ParticleBufferVelocityZ[particleIndex] = vec4(vec3(0), newVelocity.z);
    }
}