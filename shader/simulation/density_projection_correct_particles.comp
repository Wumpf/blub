#version 450

#include "../global_bindings.glsl"
#include "../utilities.glsl"
#include "hybrid_fluid.glsl"
#include "particles.glsl"

layout(set = 2, binding = 0) buffer restrict ParticlePositionLlBuffer { ParticlePositionLl Particles[]; };
layout(set = 2, binding = 1) uniform texture3D MarkerVolume;
layout(set = 2, binding = 2) uniform texture3D VelocityVolumeX;
layout(set = 2, binding = 3) uniform texture3D VelocityVolumeY;
layout(set = 2, binding = 4) uniform texture3D VelocityVolumeZ;

COMPUTE_PASS_PARTICLES

float sampleVelocity(ivec3 coord, uint component) {
    if (component == 0)
        return texelFetch(VelocityVolumeX, coord, 0).x;
    else if (component == 1)
        return texelFetch(VelocityVolumeY, coord, 0).x;
    else
        return texelFetch(VelocityVolumeZ, coord, 0).x;
}

void main() {
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= NumParticles)
        return;

    vec3 originalPosition = Particles[particleIndex].Position;

    vec3 offsetPositions[] = {
        max(vec3(0.0), originalPosition - vec3(0.5, 0.0, 0.0)),
        max(vec3(0.0), originalPosition - vec3(0.0, 0.5, 0.0)),
        max(vec3(0.0), originalPosition - vec3(0.0, 0.0, 0.5)),
    };
    vec3 texcoordSpaceFactor = 1.0 / vec3(Rendering.FluidGridResolution);
    vec3 positionChange = vec3(textureLod(sampler3D(VelocityVolumeX, SamplerTrilinearClamp), offsetPositions[0] * texcoordSpaceFactor, 0).x,
                               textureLod(sampler3D(VelocityVolumeY, SamplerTrilinearClamp), offsetPositions[1] * texcoordSpaceFactor, 0).x,
                               textureLod(sampler3D(VelocityVolumeZ, SamplerTrilinearClamp), offsetPositions[2] * texcoordSpaceFactor, 0).x);

    vec3 newPosition = originalPosition + positionChange;

    // For explanation see advect_particles
    // Push-back only done there.
    {
        vec3 texcoord = newPosition * texcoordSpaceFactor;
        // Wall penetration.
        if (clamp(newPosition, vec3(1.0001), vec3(Rendering.FluidGridResolution - 1.0001)) != newPosition ||
            texture(sampler3D(MarkerVolume, SamplerPointClamp), texcoord).x == CELL_SOLID) {
            // the length can't be 0, otherwise we wouldn't enter here. But result may be inaccurate.
            float currentStepLength = length(positionChange) + 1e-10;
            vec3 movementDirection = positionChange / currentStepLength;
            vec3 absMovementDirection = abs(movementDirection);

            vec3 posInCell = fract(originalPosition);
            float maxAllowedStep = currentStepLength;
            maxAllowedStep = min(maxAllowedStep, (movementDirection.x > 0.0 ? posInCell.x : 1.0 - posInCell.x) / absMovementDirection.x - 0.001);
            maxAllowedStep = min(maxAllowedStep, (movementDirection.y > 0.0 ? posInCell.y : 1.0 - posInCell.y) / absMovementDirection.y - 0.001);
            maxAllowedStep = min(maxAllowedStep, (movementDirection.z > 0.0 ? posInCell.z : 1.0 - posInCell.z) / absMovementDirection.z - 0.001);

            // Correct position so we really do not penetrate that cell.
            positionChange = movementDirection * maxAllowedStep;

            newPosition = originalPosition + positionChange;
            newPosition = clamp(newPosition, vec3(1.0001), vec3(Rendering.FluidGridResolution - 1.0001));

            // Do we also need to change the derivatives of velocity? Maybe just scale them?
        }
    }

    Particles[particleIndex].Position = newPosition;
}